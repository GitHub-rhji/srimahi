#include <stdio.h>

#define N 5
#define M 3

int need[N][M], allocate[N][M], request[N][M], avail[M];
int total_resource[M] = {7, 5, 3};
int work[M];

int i, j, k;
int sequence[N];
int safe_sequence = 1;

void input() {
    printf("Enter the allocation matrix:\n");
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            scanf("%d", &allocate[i][j]);
        }
    }

    printf("Enter the maximum matrix:\n");
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            scanf("%d", &need[i][j]);
        }
    }

    printf("Enter the initial available resources:\n");
    for (j = 0; j < M; j++) {
        scanf("%d", &avail[j]);
    }

    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            work[j] = avail[j];
        }

        for (j = 0; j < M; j++) {
            request[i][j] = 0;
        }
    }
}

void check_safe_state() {
    int flag = 1;
    int count = 0;

    for (i = 0; i < N; i++) {
        sequence[i] = -1;
    }

    while (count < N) {
        flag = 1;

        for (i = 0; i < N; i++) {
            if (sequence[i] == -1) {
                int j;
                for (j = 0; j < M; j++) {
                    if (request[i][j] > need[i][j] || request[i][j] > work[j]) {
                        flag = 0;
                        break;
                    }
                }

                if (flag == 1) {
                    sequence[i] = count;

                    for (j = 0; j < M; j++) {
                        work[j] += allocate[i][j];
                    }

                    count++;
                }
            }
        }
    }

    if (count < N) {
        safe_sequence = 0;
    }
}

void display_sequence() {
    if (safe_sequence == 1) {
        printf("Safe sequence is: ");

        for (i = 0; i < N; i++) {
            if (sequence[i] != -1) {
                printf("P%d ", i + 1);
            }
        }

        printf("\n");
    } else {
        printf("System is in unsafe state.\n");
    }
}

int main() {
    input();

    while (1) {
        printf("Enter the request matrix (or enter -1 -1 -1 to exit):\n");
        for (i = 0; i < N; i++) {
            for (j = 0; j < M; j++) {
                scanf("%d", &request[i][j]);

                if (request[i][j] == -1) {
                    j = M;
                    break;
                }
            }
        }

        if (request[0][0] == -1) {
            break;
        }

        check_safe_state();

        display_sequence();
    }

    return 0;
}
